# Copyright 2019 Mechanics of Microstructures Group
#    at The University of Manchester
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import pathlib
from typing import Union, TYPE_CHECKING

import numpy as np
import pandas as pd

if TYPE_CHECKING:
    import defdap.ebsd as ebsd
    import defdap.hrdic as hrdic


def _checkEBSDMetadata(ebsd_map: "ebsd.Map"):
    if len(ebsd_map.phaseNames) != ebsd_map.numPhases:
        print("Number of phases mismatch.")
        raise AssertionError


def _loadOxfordCPR(fileStub: pathlib.Path, ebsd_map: "ebsd.Map"):
    """ A .cpr file is a metadata file describing EBSD data.
    This function opens the cpr file, reading in the x and y
    dimensions and phase names."""
    filePath = fileStub.with_suffix(".cpr")
    if not filePath.is_file():
        raise FileNotFoundError("Cannot open file {}".format(filePath))

    with open(str(filePath), 'r') as cprFile:

        for line in cprFile:
            if 'xCells' in line:
                ebsd_map.xDim = int(line.split("=")[-1])
            elif 'yCells' in line:
                ebsd_map.yDim = int(line.split("=")[-1])
            elif 'GridDistX' in line:
                ebsd_map.stepSize = float(line.split("=")[-1])
            elif '[Phases]' in line:
                ebsd_map.numPhases = int(next(cprFile).split("=")[-1])
            elif '[Phase' in line:
                phaseName = next(cprFile).split("=")[-1].strip('\n')
                ebsd_map.phaseNames.append(phaseName)

    _checkEBSDMetadata(ebsd_map)


def _loadOxfordCRC(fileStub: pathlib.Path, ebsd_map: "ebsd.Map"):
    """Read binary EBSD data from a .crc file"""
    filePath = fileStub.with_suffix(".crc")

    if not filePath.is_file():
        raise FileNotFoundError("Cannot open file {}".format(filePath))

    dataFormat = np.dtype([
        ('Phase', 'b'),
        ('ph1', 'f'),
        ('phi', 'f'),
        ('ph2', 'f'),
        ('MAD', 'f'),
        ('BC', 'uint8'),
        ('IB3', 'uint8'),
        ('IB4', 'uint8'),
        ('IB5', 'uint8'),
        ('IB6', 'f')
    ])
    binData = np.fromfile(str(filePath), dataFormat, count=-1)

    build_ebsd_data(binData, ebsd_map)


def _loadOxfordCTF(filePath: pathlib.Path, ebsd_map: "ebsd.Map"):
    """ A .ctf file is a HKL single orientation file. This is a
    data file generated by the Oxford EBSD instrument."""

    # open data file and read in metadata
    if not filePath.is_file():
        raise FileNotFoundError("Cannot open file {}".format(filePath))

    with open(str(filePath), 'r') as ctfFile:

        for line_num, line in enumerate(ctfFile):
            if 'XCells' in line:
                ebsd_map.xDim = int(line.split()[-1])
            elif 'YCells' in line:
                ebsd_map.yDim = int(line.split()[-1])
            elif 'XStep' in line:
                ebsd_map.stepSize = float(line.split()[-1])
            elif 'Phases' in line:
                numPhases = int(line.split()[-1])
                ebsd_map.numPhases = numPhases
                for phase_num in range(numPhases):
                    ebsd_map.phaseNames.append(next(ctfFile).split()[2])
                numHeaderLines = line_num + numPhases + 2
                # phases are last in the header so break out of the loop
                break

    _checkEBSDMetadata(ebsd_map)

    # now read the data from file
    dataFormat = np.dtype([
        ('Phase', 'b'),
        ('ph1', 'f'),
        ('phi', 'f'),
        ('ph2', 'f'),
        ('MAD', 'f'),
        ('BC', 'uint8')
    ])
    input_data = np.loadtxt(
        str(filePath), dataFormat, delimiter='\t',
        skiprows=numHeaderLines, usecols=(0, 5, 6, 7, 8, 9)
    )

    build_ebsd_data(input_data, ebsd_map)
    # Convert from degrees to radians
    ebsd_map.eulerAngleArray = ebsd_map.eulerAngleArray * np.pi / 180.


def build_ebsd_data(input_data: np.ndarray, ebsd_map: "ebsd.Map"):
    """Given raw input data, build an EBSD data object."""
    ebsd_map.bandContrastArray = np.reshape(input_data['BC'], (ebsd_map.yDim, ebsd_map.xDim))
    ebsd_map.phaseArray = np.reshape(input_data['Phase'], (ebsd_map.yDim, ebsd_map.xDim))
    eulerAngles = np.stack((input_data['ph1'], input_data['phi'], input_data['ph2']),
                           axis=0)
    ebsd_map.eulerAngleArray = eulerAngles.reshape((3, ebsd_map.yDim, ebsd_map.xDim))


def checkDICData(dic_map: "hrdic.Map"):
    # Calculate size of map from loaded data and check it matches
    # values from metadata
    xdim = int(
        (dic_map.xc.max() - dic_map.xc.min()) / min(abs(np.diff(dic_map.xc))) + 1
    )

    ydim = int(
        (dic_map.yc.max() - dic_map.yc.min()) / max(abs(np.diff(dic_map.yc))) + 1
    )

    if not xdim == dic_map.xdim or not ydim == dic_map.ydim:
        raise AssertionError("Dimensions of data and header do not match")


def _loadDaVisData(filePath: pathlib.Path, dic_map: "hrdic.Map"):
    # Load DIC data from a txt file in the format used by DaVis imaging software
    if not filePath.is_file():
        raise FileNotFoundError("Cannot open file {}".format(filePath))

    with open(str(filePath), 'r') as f:
        line = f.readline().split()

    dic_map.format = line[0].strip('#')
    dic_map.version = line[1]
    dic_map.binning = int(line[3])
    dic_map.xdim = int(line[5])
    dic_map.ydim = int(line[4])

    raw_data = pd.read_table(str(filePath), delimiter='\t', skiprows=1, header=None)

    dic_map.xc = raw_data.values[:, 0]    # x coordinates
    dic_map.yc = raw_data.values[:, 1]    # y coordinates
    dic_map.xd = raw_data.values[:, 2]    # x displacement
    dic_map.yd = raw_data.values[:, 3]    # y displacement

    checkDICData(dic_map)


def loadEBSDData(file_path: Union[str, os.PathLike], ebsd_map: "ebsd.Map"):
    """General method for loading EBSD data and associated metadata."""
    path = pathlib.Path(file_path)
    if not path.exists():
        raise FileNotFoundError

    if path.suffix == ".ctf":
        _loadOxfordCTF(path, ebsd_map)
    elif path.suffix == ".cpr" or path.suffix == ".crc":
        file_stub = path.with_suffix('')
        _loadOxfordCPR(file_stub, ebsd_map)
        _loadOxfordCRC(file_stub, ebsd_map)
    else:
        raise TypeError(f"File {path} is an unknown type for EBSD data.")


def loadDICData(file_path: Union[str, os.PathLike], dic_map: "hrdic.Map"):
    """General method for loading DIC data and associated metadata."""
    path = pathlib.Path(file_path)
    if not path.exists():
        raise FileNotFoundError

    if path.suffix == ".txt":
        _loadDaVisData(path, dic_map)
    else:
        raise TypeError(f"File {path} is an unknown type for DIC data.")
